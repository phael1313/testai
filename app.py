import streamlit as st
import openai
import docx2txt
import os

st.set_page_config(page_title="Testai ‚Äî Gerador de Checklists de Testes", layout="wide")
st.title("Testai ‚Äî Gerador de Checklists de Testes")
st.markdown("Envie um arquivo .docx com a documenta√ß√£o do teste. A IA ir√° gerar um checklist com base no conte√∫do.")

uploaded_file = st.file_uploader("Envie um arquivo .docx de testes manuais", type="docx")

if uploaded_file:
    with open("documento.docx", "wb") as f:
        f.write(uploaded_file.read())
    st.success("Arquivo lido com sucesso!")

    gerar = st.button("Gerar HTML via IA")

    if gerar:
        with st.spinner("Gerando relat√≥rio inteligente com IA..."):
            texto = docx2txt.process("documento.docx")

            prompt = f"""
Seu papel √© gerar um arquivo HTML interativo com base em uma documenta√ß√£o de teste descrita a seguir.
A estrutura visual deve seguir este padr√£o fixo:

1. T√≠tulo principal: "Controle de Testes"
2. Subt√≠tulo com nome do cliente e tipo de valida√ß√£o
3. Campos para:
   - Nome do respons√°vel (input edit√°vel)
   - Data do teste (input tipo date)
4. Bloco "Itens a Validar": cada item extra√≠do deve conter:
   - Um checkbox
   - Um t√≠tulo (item extra√≠do)
   - Um par√°grafo explicativo simples abaixo (pode ser gen√©rico)
5. Bloco "Progresso dos Testes" com uma barra que atualiza conforme checkboxes s√£o marcados
6. Bloco "Log de Altera√ß√µes" com textarea que registra automaticamente data/hora + a√ß√£o do usu√°rio (ex: marcou item 1)
7. Bloco final com bot√µes:
   - Salvar Progresso
   - Exportar HTML com Progresso
   - Gerar Relat√≥rio de Controle de Teste
   - Limpar Log
   - Reiniciar Testes

Todo o layout deve ser bonito, responsivo, com CSS embutido no HTML (usando <style> no <head>).
Fonte padr√£o: Arial, t√≠tulos com cor azul #1a5da0, margens de 20px.

Conte√∫do base extra√≠do do .docx:
"""
{texto}
"""
            """

            openai.api_key = os.getenv("OPENAI_API_KEY")
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}]
            )

            html_output = response.choices[0].message.content

            with open("relatorio_gerado.html", "w", encoding="utf-8") as f:
                f.write(html_output)

            st.success("HTML gerado com sucesso!")
            with open("relatorio_gerado.html", "rb") as f:
                st.download_button("üì• Baixar Relat√≥rio HTML com IA", f, file_name="relatorio_gerado.html")