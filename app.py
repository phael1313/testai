
import streamlit as st
from docx import Document
import os
from openai import OpenAI
from datetime import datetime

st.set_page_config(page_title="Testai ‚Äî Gerador de Checklist", layout="wide")

st.title("Testai ‚Äî Gerador de Checklist")
st.markdown("Envie um arquivo .docx com a documenta√ß√£o do teste. A IA ir√° gerar um checklist com base no conte√∫do e exportar um HTML.")

uploaded_file = st.file_uploader("Envie um arquivo .docx de testes manuais", type=["docx"])

if uploaded_file:
    st.success("Arquivo lido com sucesso!")
    doc = Document(uploaded_file)
    texto = "\n".join([p.text for p in doc.paragraphs if p.text.strip()])

    gerar = st.button("Gerar HTML via IA")
    if gerar:
        with st.spinner("Gerando relat√≥rio inteligente com IA..."):
            try:
                client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

                prompt = f"""
Voc√™ √© um assistente que recebe uma documenta√ß√£o de teste manual no formato de texto e converte isso em um arquivo HTML estruturado com base no layout fixo da empresa.
Gere uma estrutura de relat√≥rio contendo:
- T√≠tulo principal como 'Controle de Testes'
- Subt√≠tulo com o nome do cliente e descri√ß√£o do projeto, se houver
- Campo para nome do respons√°vel (input preench√≠vel)
- Campo para data do teste (preench√≠vel)
- Se√ß√£o 'Itens a Validar' com checkbox para cada item extra√≠do
- Barra de progresso din√¢mica
- Se√ß√£o 'Log de Altera√ß√µes'
- Bot√µes fixos ao final: 'Salvar Progresso', 'Exportar HTML com Progresso', 'Gerar Relat√≥rio de Ajustes', 'Limpar Log', 'Reiniciar Testes'

O estilo visual deve seguir:
- Fonte Arial
- T√≠tulos na cor #1a5da0
- Margem lateral de 20px
- Organiza√ß√£o em divs com classes: header, report-section, item-list, item, log-section
- Os checkboxes devem ser gerados com base nos itens que voc√™ identificar na documenta√ß√£o
- Todos os bot√µes devem funcionar via JavaScript

Retorne apenas o conte√∫do HTML completo e funcional, com CSS embutido. N√£o inclua coment√°rios nem explica√ß√µes.
Conte√∫do a ser processado:
"""
{texto}
"""
                """

                response = client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "Voc√™ √© um gerador de relat√≥rios em HTML."},
                        {"role": "user", "content": prompt}
                    ],
                    temperature=0.3
                )

                html_content = response.choices[0].message.content

                filename = "relatorio_testes_gerado.html"
                with open(filename, "w", encoding="utf-8") as f:
                    f.write(html_content)

                with open(filename, "rb") as f:
                    st.download_button("üì• Baixar Relat√≥rio HTML com IA", f, file_name=filename)

            except Exception as e:
                st.error(f"Erro ao gerar HTML: {e}")
